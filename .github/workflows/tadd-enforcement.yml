name: TADD Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write  # Required for checks API

jobs:
  verify-test-first:
    name: Verify Test-First Development
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history needed for commit analysis
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Check TADD Order
        id: tadd_check
        run: |
          python scripts/verify_tadd_order.py
          echo "status=$?" >> $GITHUB_OUTPUT
      
      - name: Comment PR (if failed)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **TADD Violation Detected**
              
              Tests must be written before implementation.
              
              Please ensure:
              1. Write failing tests first (commit with \`test:\` prefix)
              2. Then implement the feature (commit with \`feat:\` or \`fix:\` prefix)
              3. Tests should fail initially and pass after implementation
              
              Run \`python scripts/verify_tadd_order.py\` locally to check compliance.`
            })

  check-mock-usage:
    name: Check Mock Usage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Analyze Mock Usage
        id: mock_check
        run: |
          python scripts/detect_mock_usage.py
          echo "status=$?" >> $GITHUB_OUTPUT
      
      - name: Upload Mock Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mock-usage-report
          path: |
            mock-report.json
            mock-violations.txt

  test-coverage:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --cov=scripts --cov-report=xml --cov-report=term --cov-fail-under=20
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  quality-gate:
    name: TADD Quality Gate
    runs-on: ubuntu-latest
    needs: [verify-test-first, check-mock-usage, test-coverage]
    if: always()
    
    steps:
      - name: Check Quality Gate Status
        run: |
          echo "🔍 TADD Enforcement Summary"
          echo "=========================="
          
          # Check if all jobs passed
          if [ "${{ needs.verify-test-first.result }}" != "success" ]; then
            echo "❌ Test-First Development: FAILED"
            exit 1
          else
            echo "✅ Test-First Development: PASSED"
          fi
          
          if [ "${{ needs.check-mock-usage.result }}" != "success" ]; then
            echo "❌ Mock Usage Check: FAILED"
            exit 1
          else
            echo "✅ Mock Usage Check: PASSED"
          fi
          
          if [ "${{ needs.test-coverage.result }}" != "success" ]; then
            echo "❌ Test Coverage: FAILED"
            exit 1
          else
            echo "✅ Test Coverage: PASSED"
          fi
          
          echo ""
          echo "✅ All TADD checks passed!"
      
      - name: Set PR Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            // Use checks API instead of commit status API to avoid permission issues
            const { owner, repo } = context.repo;
            const checkName = 'TADD Quality Gate';
            const head_sha = context.payload.pull_request?.head?.sha || context.sha;
            
            const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const title = conclusion === 'success' 
              ? '✅ All TADD requirements met' 
              : '❌ TADD requirements not met';
            
            const summary = conclusion === 'success'
              ? `All TADD enforcement checks have passed successfully:
              - ✅ Test-First Development verified
              - ✅ Test Coverage meets requirements (>20%)
              - ✅ Mock usage within limits (<20%)`
              : `Some TADD requirements were not met. Please review the failed checks above.`;
            
            try {
              await github.rest.checks.create({
                owner,
                repo,
                name: checkName,
                head_sha,
                status: 'completed',
                conclusion,
                output: {
                  title,
                  summary
                }
              });
              console.log(`✅ Successfully created check: ${checkName}`);
            } catch (error) {
              console.error(`Failed to create check: ${error.message}`);
              // Don't fail the job if we can't create the check
              // The individual job results are what matter
            }